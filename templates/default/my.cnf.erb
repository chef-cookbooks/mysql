#
# Generated by Chef for <%= node['hostname'] %>
#
# Local modifications will be overwritten.
#
# The MySQL database server configuration file.
#
# You can copy this to one of:
# - "/etc/mysql/my.cnf" to set global options,
# - "~/.my.cnf" to set user-specific options.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html
<%

# This cookbook uses the config hash methodology documented in https://github.com/rackspace-cookbooks/contributing
# The config has is broken up into blocks for each section of the my.cnf config to allow easy adding of extra options
#   by calling recipes.
# The general layout is node['rackspace_mysql']['config'][block][option] = Config Inner hash
# Where:
#   - option is the option name, i.e. 'port'
#   - block corresponds to the my.cnf block the option goes in, i.e. 'mysqld'
#   - The inner hash is the standard inner hash format as documented in rackspace-cookbooks/contributing with the
#      following deviations:
#      - key: 'bool_flag': Sets that this option is a flag in the config, and the key should be added without a value.
#
# The exception to this is node['rackspace_mysql']['config']['common'] which is solely for variables used in
#   multiple locations/blocks of the file.
#
# Current common attributes:
#   ['config']['common']['port']               (client, mysqld)
#   ['config']['common']['myisam-recover']
#   ['config']['common']['table_open_cache']
#   ['config']['common']['socket']             (client, mysqld_safe, mysqld)
#   ['config']['common']['max_allowed_packet']

# Duplicate the config hash so we can modify it
my_config_hash = node['rackspace_mysql']['config'].dup

#
# Define some helper functions
# These do not output directly due to the nature of ERB, but instead return the string to be added
# (Though Chef doesn't actually use the ERB engine, err on the side of caution)
#

# Add single option: return the string data to add a single option to the config file WITH an ending newline
# Error if the option is not found
def add_single_option(option_name, option_inner_hash)
  ret_val = ""
  if option_inner_hash.key?('comment')
    # With newline as more lines will be appended
    ret_val << "# #{option_name}: #{option_inner_hash['comment']}\n"
  end

  if option_inner_hash.key?('bool_flag')
    # Boolean flag, no argument
    ret_val << "#{option_name}\n"
  else
    # Normal option
    ret_val << "#{option_name} = #{option_inner_hash['value']}\n"
  end
  return ret_val
end


# add_and_delete_option: Return the value of add_single_option for the given option name, and delete it from tha hash.
def add_and_delete_option(option_name, block_name, my_config_hash, optional = false)
  if optional == true and !my_config_hash[block_name].key?(option_name)
    # If the optional flag was specified then this option was explicitly referenced in the file
    # Return a comment that it is disabled
    return "# #{option_name}: Unset\n"
  end

  ret_val = add_single_option(option_name, my_config_hash[block_name][option_name])
  # Delete the key fron the config hash so we can use a simple iterator for the remaining options                                                                                                         
  my_config_hash[block_name].delete(option_name)
end

# add_all_options: Add all options in the specified block
# Errors if any mandatory options are not found, mandatory_options is an array of option names
def add_all_options(block_name, my_config_hash, mandatory_options)
  ret_val = ""
  # Sort all the keys the loops so that we don't have issues with Chef changing the files
  #   due to the loop ordering changing.  Otherwise the order could change between runs
  #   due to hashes being inherently unordered causing unnecessairy file changes and associated
  #   service restarts.

  # Include the mandatory options first
  mandatory_options.keys.sorted.each do |option_name|
    ret_val << add_and_delete_option(option_name, block_name, my_config_hash)
    ret_val << "\n"
  end

  # Include any extra arguments
  if my_config_hash[block_name].len > 0
    ret_val << "\n# Extra Arguments\n"

    my_config_hash[block_name].keys.sorted.each do |option_name|
      ret_val << add_single_option(option_name, my_config_hash[block_name][option_name])
      ret_val << "\n"
    end
  end
  
  return ret_val
end

# End initial declaration block
-%>

# This will be passed to all mysql clients
# It has been reported that passwords should be enclosed with ticks/quotes
# especially if they contain "#" chars...
# Remember to edit /etc/mysql/debian.cnf when changing the socket location.
[client]
<%= add_single_option('port', my_config_hash['common']['port']) %>
<%= add_single_option('socket', my_config_hash['common']['socket']) %>

# Here is entries for some specific programs
# The following values assume you have at least 32M ram

# This was formally known as [safe_mysqld]. Both versions are currently parsed.
[mysqld_safe]
<%= add_single_option('socket', my_config_hash['common']['socket']) %>
<%= add_and_delete_option('nice', 'mysqld_safe', my_config_hash) %>

[mysqld]
#
# * Basic Settings
#

#
# * IMPORTANT
#   If you make changes to these settings and your system uses apparmor, you may
#   also need to also adjust /etc/apparmor.d/usr.sbin.mysqld.
#

<%= add_and_delete_option('user', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('pid_file', 'mysqld', my_config_hash) -%>
<%= add_single_option('socket', my_config_hash['common']['socket']) -%>
<%= add_single_option('port', my_config_hash['common']['port']) -%>
<%= add_and_delete_option('basedir', 'mysqld', my_config_hash) -%>
# This option is used in two locations within this block
<%= add_single_option('datadir', my_config_hash['mysqld']['datadir']) -%>
<%= add_and_delete_option('tmpdir', 'mysqld', my_config_hash) -%>
skip-external-locking
<%= add_and_delete_option('skip-name-resolve', 'mysqld', my_config_hash, true) -%>

# Charset and Collation
<%= add_and_delete_option('character-set-server', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('collation-server', 'mysqld', my_config_hash) -%>

<%= add_and_delete_option('lower_case_table_names', 'mysqld', my_config_hash, true) -%>
<%= add_and_delete_option('event_scheduler', 'mysqld', my_config_hash, true) -%>
<%= add_and_delete_option('skip-character-set-client-handshake', 'mysqld', my_config_hash, true) -%>
<%- 

if (my_config_hash['mysqld']['lc_messages_dir'] && my_config_hash['mysqld']['lc_messages']) %>
<%= add_and_delete_option('lc_messages_dir', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('lc_messages', 'mysqld', my_config_hash) -%>
<%- elsif (my_config_hash['mysqld']['languages']) %>
<%= add_and_delete_option('languages', 'mysqld', my_config_hash) -%>
<%- end %>

#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
<%= add_and_delete_option('bind-address', 'mysqld', my_config_hash) -%>
#
# * Fine Tuning
#
<%
%w(key_buffer_size max_allowed_packet thread_stack thread_cache_size sort_buffer_size read_buffer_size read_rnd_buffer_size
join_buffer_size auto-increment-increment auto-increment-offset).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash) -%>
<% end -%>

# This replaces the startup script and checks MyISAM tables if needed
# the first time they are touched
<% %w(myisam-recover max_connections max_connect_errors concurrent_insert connect_timeout wait_timeout net_read_timeout
net_write_timeout back_log).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash) -%>
<% end -%>
<%- 
# Special case: The variable changed between versions
# TODO: Do we even support MySQL <= 5.1?
if my_config_hash['mysqld']['table_open_cache'].key?('comment') -%>
# table_open_cache: <%= my_config_hash['mysqld']['table_open_cache']['comment'] %>
<% end
if node['rackspace_mysql']['version'].to_f >= 5.1 -%>
table_open_cache = <%= my_config_hash['mysqld']['table_open_cache']['value'] %>
<%- else %>
table_cache = <%= my_config_hash['mysqld']['table_open_cache']['value'] %>
<%- end 
my_config_hash['mysqld'].delete('table_open_cache')
%>

<% %w( tmp_table_size max_heap_table_size bulk_insert_buffer_size open-files-limit).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash) -%>
<% end -%>

# Default Table Settings
add_and_delete_option('sql_mode', 'mysqld', my_config_hash, true) -%>

#
# * Query Cache Configuration
#
<% %w(query_cache_type query_cache_limit query_cache_size).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash) -%>
<% end -%>

#
# * Logging
#
# Both location gets rotated by the cronjob.
# Be aware that this log type is a performance killer.
#log            = /var/log/mysql/mysql.log
#
<%= add_and_delete_option('log_error', 'mysqld', my_config_hash, true) -%>
<%= add_and_delete_option('log_warnings', 'mysqld', my_config_hash, true) -%>

#
# Here you can see queries with especially long duration
<% 
# Special case: If slow_query_log is set, add slow_query_log and slow_query_log_file
#               Otherwise add log_slow_queries
if my_config_hash['mysqld'].key?('slow_query_log') %>
<%= add_and_delete_option('slow_query_log', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('slow_query_log_file', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('log-queries-not-using-indexes', 'mysqld', my_config_hash, true) -%>
<%- else %>
<%= add_and_delete_option('log_slow_queries', 'mysqld', my_config_hash, true) -%>
<% 
   fail "Option slow_query_log_file must be paired with slow_query_log" if my_config_hash['mysqld'].key?('slow_query_log_file')
   fail "Option log-queries-not-using-indexes must be paired with slow_query_log" if my_config_hash['mysqld'].key?('log-queries-not-using-indexes')
end -%>
add_and_delete_option('long_query_time', 'mysqld', my_config_hash) -%>

#
# * Replication
#

#
# The following can be used as easy to replay backup logs or for replication.
# note: if you are setting up a replication slave, see README.Debian about
#       other settings you may need to change.
<%= add_and_delete_option('server-id', 'mysqld', my_config_hash, true) -%>
<%- if my_config_hash['mysqld'].key?('log_bin') %>
<%= add_and_delete_option('log_bin', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('binlog_format', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('log_slave_updates', 'mysqld', my_config_hash) -%>
<%- end %>
<%= add_and_delete_option('log_bin_trust_function_creators', 'mysqld', my_config_hash, true) -%>

<%= add_and_delete_option('expire_logs_days', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('max_binlog_size', 'mysqld', my_config_hash) -%>
<%= add_and_delete_option('binlog_cache_size', 'mysqld', my_config_hash) -%>
#binlog_do_db           = include_database_name
#binlog_ignore_db       = include_database_name
<%= add_and_delete_option('sync_binlog', 'mysqld', my_config_hash) -%>
<%
# Optional arguments we want to include in the replication section
%w(relay_log relay_log_index replicate_do_db replicate_do_db replicate_do_table replicate_ignore_db
replicate_ignore_table replicate_wild_do_table replicate_wild_ignore_table skip_slave_start
read_only transaction-isolation slave_compressed_protocol).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash, true) -%>
<% end -%>

#
# * InnoDB
#
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.
# Read the manual for more InnoDB related options. There are many!
# You might want to disable InnoDB to shrink the mysqld process by circa 100MB.
#skip-innodb

<%- if node['rackspace_mysql']['version'].to_f >= 5.5
%w(innodb_write_io_threads innodb_io_capacity innodb_read_io_threads innodb_buffer_pool_instances).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash) -%>
<% end
end -%>

## InnoDB Plugin Independent Settings
<%
# SPECIAL CASE: Option name:key name mismatch
# This key is used twice.
if my_config_hash['mysqld']['data_dir'].key?('comment') -%>
# innodb_data_home_dir: <%= my_config_hash['mysqld']['table_open_cache']['comment'] %>
<% end -%>
# innodb_data_home_dir: NOTE: Uses ['mysqld']['data_dir'] keys in the configuration hash
innodb_data_home_dir = <%= my_config_hash['mysqld']['data_dir']['value'] %>
<% my_config_hash['mysqld'].delete('data_dir') -%>

<%
# Mandatory InnoDB options
%w(innodb_log_group_home_dir innodb_table_locks innodb_lock_wait_timeout innodb_thread_concurrency innodb_commit_concurrency
innodb_support_xa innodb_buffer_pool_size innodb_log_file_size innodb_additional_mem_pool_size innodb_data_file_path
innodb_flush_log_at_trx_commit).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash) -%>
<% end -%>

<%
# Optional InnoDB options
%(innodb_log_files_in_group innodb_status_file innodb_file_per_table skip-innodb-doublewrite innodb_flush_method
innodb_log_buffer_size innodb_adaptive_flushing innodb_adaptive_flushing_method innodb_adaptive_checkpoint
innodb_change_buffering innodb_doublewrite innodb_file_format).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash, true) -%>
<% end -%>

#
# * Federated
#
# The FEDERATED storage engine is disabled since 5.0.67 by default in the .cnf files
# shipped with MySQL distributions (my-huge.cnf, my-medium.cnf, and so forth).
#
<%= add_and_delete_option('skip-federated', 'mysqld', my_config_hash, true) -%>

#
# * Security Features
#
# Read the manual, too, if you want chroot!

<%
# Optional Security Features
%(chroot safe_user_create secure_auth skip_symbolic_links secure_file_priv local_infile skip_show_database).each do |option_name| -%>
<%= add_and_delete_option(option_name, 'mysqld', my_config_hash, true) -%>
<% end -%>

# For generating SSL certificates I recommend the OpenSSL GUI "tinyca".
#
# ssl-ca=/etc/mysql/cacert.pem
# ssl-cert=/etc/mysql/server-cert.pem
# ssl-key=/etc/mysql/server-key.pem

#
# * BerkeleyDB
#
# Using BerkeleyDB is now discouraged as its support will cease in 5.1.12.
<%= add_and_delete_option('skip-bdb', 'mysqld', my_config_hash, true) -%>
# Default to using old password format for compatibility with mysql 3.x
# clients (those using the mysqlclient10 compatibility package).
<%= add_and_delete_option('old_passwords', 'mysqld', my_config_hash, true) -%>

<%
# Goodness, that was a long section.
# Add anything left. We will use our add all options helper, but because of the comment blocking above we've already called out
# all the mandatory arguments.  As such we won't use that feature in this block.
-%>
<%= add_all_options('mysqld', my_config_hash, []) -%>

[mysqldump]
quick
quote-names
<%= add_all_options('mysqldump', my_config_hash, %w(max_allowed_packet)) -%>

[mysql]
#no-auto-rehash # faster start of mysql but no tab completition

[myisamchk]
<%= add_all_options('myisamchk', my_config_hash,
                    %w(max_allowed_packet myisam_sort_buffer_size myisam_max_sort_file_size myisam_repair_threads myisam-recover)
                   ) -%>

<% if my_config_hash['directories']['confd_dir'] -%>
#
# * IMPORTANT: Additional settings that can override those from this file!
#   The files must end with '.cnf', otherwise they'll be ignored.
#
!includedir <%= my_config_hash['directories']['confd_dir'] %>/
<% end -%>
